{"version":3,"sources":["components/Navbar/index.js","pages/Home/index.js","components/Tile/index.js","pages/Game/index.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Home","search","startGame","onChange","value","onClick","role","Tile","click","image","src","alt","Game","console","log","this","props","gameOver","result","length","coins","resetGame","playing","map","gif","i","key","images","original","url","checkGameStatus","Component","theme","axios","get","App","useState","clicked","gameState","setGameState","e","target","API","then","res","data","state","index","shuffle","array","j","Math","floor","random","resetState","useEffect","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e089de8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./style.css\"\r\n\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar bg-success justify-content-center\">\r\n            <Link className=\"navbar-brand py-2\" to=\"/\">\r\n                    <span className=\"display-1 text-white\"><i className=\"fas fa-brain\"></i> Memory Game <i\r\n                        className=\"fas fa-brain\"></i></span>\r\n            </Link>\r\n\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = ({ search, startGame }) => {\r\n\r\n    return (\r\n        <div className=\"container mt-4\">\r\n            <div className=\"jumbotron text-center\">\r\n                <h1 className=\"display-4\">Test your memory skills with this game</h1>\r\n                <p className=\"lead my-2\">Select your theme:</p>\r\n                <select className=\"form-control form-control-lg\" onChange={search}>\r\n                    <option value=\"?\"></option>\r\n                    <option value=\"theoffice\">The Office</option>\r\n                    <option value=\"rickandmorty\">Rick And Morty</option>\r\n                    <option value=\"brooklynninenine\">Brooklyn Nine Nine</option>\r\n                    <option value=\"americandad\">American Dad</option>\r\n                    <option value=\"parksandrec\">Parks and Recreation</option>\r\n                    <option value=\"thesimpsons\">The Simpsons</option>\r\n                    <option value=\"supernatural\">Supernatural</option>\r\n                    <option value=\"adventuretime\">Adventure Time</option>\r\n\r\n                </select>\r\n                <p className=\"lead py-3\">\r\n\r\n                    <Link to=\"/memory-game/Game\" onClick={startGame} className=\"btn btn-warning btn-lg\" role=\"button\">\r\n                        Get Playing <i className=\"fas fa-gamepad\"></i>\r\n                    </Link>\r\n\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Tile({ click, image }) {\r\n    return (\r\n        <div onClick={() => click(image)} className=\"col-4\">\r\n            <img className=\"mb-3 img-thumbnail\" src={image} alt={image} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tile;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Tile from \"../../components/Tile\"\r\nimport \"./style.css\";\r\n\r\nclass Game extends Component {\r\n\r\n\r\n    checkGameStatus() {\r\n        console.log(\"Props\", this.props);\r\n        if (this.props.gameOver || this.props.result.length === 0) {\r\n            return (\r\n                <div>\r\n                    <h2 className=\"display-4 mb-3\">GAME OVER!! You Scored {this.props.coins} points!</h2>\r\n\r\n                    <Link onClick={this.props.resetGame} to=\"/memory-game/\" className=\"btn btn-warning btn-lg\" role=\"button\">\r\n                        Play Again <i className=\"fas fa-gamepad\"></i>\r\n                    </Link>\r\n\r\n                </div>\r\n            );\r\n\r\n        } else if (this.props.playing) {\r\n            return (\r\n\r\n                <div>\r\n                    <h2 className=\"display-4 mb-3\">Click each gif only once... Go!</h2>\r\n                    <div className=\"row\">\r\n                        {this.props.result.map((gif, i) => (\r\n                            <Tile key={i} click={this.props.click} image={gif.images.original.url} />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container mt-4\">\r\n                <div className=\"jumbotron text-center\">\r\n\r\n                    {this.checkGameStatus()}\r\n\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Game;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n    searchTiles: function (theme) {\r\n        var APIKEY = \"bioSSe7tdt2zjVgAfZgThBaUxDZ6UA3K\";\r\n        return axios.get(\"https://api.giphy.com/v1/gifs/search?q=\" + theme + \"&api_key=\" + APIKEY + \"&limit=9\");\r\n    }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./pages/Home\";\nimport Game from \"./pages/Game\";\nimport API from \"./utils/API\";\n\n\nfunction App() {\n  const [gameState, setGameState] = useState({\n    result: [],\n    gameOver: false,\n    clicked: {},\n    playing: false,\n    coins: 0\n  });\n\n  function search(e) {\n    console.log(\"SEARCHING FOR\", e.target.value);\n    API.searchTiles(e.target.value)\n      .then(res => {\n        console.log(\"API SEARCH RESULTS\", res.data.data);\n        setGameState(state => ({\n          ...state,\n          result: res.data.data\n        }));\n      });\n  }\n\n  function click(index) {\n    if (gameState.clicked[index]) {\n      console.log(\"GAME OVER\");\n      setGameState(state => ({\n        ...state,\n        gameOver: true\n      }));\n    } else {\n      console.log(\"KEEP PLAYING\");\n      gameState.clicked[index] = true;\n      setGameState(state => ({\n        ...state,\n        coins: state.coins + 1,\n        clicked: state.clicked,\n        result: shuffle(gameState.result)\n      }));\n    }\n    console.log(\"GAME STATE AFTER CLICK\", gameState);\n  }\n\n  function shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n\n  function startGame() {\n    if (gameState.result.length > 0) {\n      setGameState(state => ({\n        ...state,\n        playing: true\n      }));\n      console.log(\"GAME STATE AFTER START GAME\", gameState);\n    }\n  }\n\n  function resetState() {\n    setGameState(state => ({\n      ...state,\n      result: [],\n      gameOver: false,\n      clicked: {},\n      playing: false,\n      coins: 0\n    }));\n    console.log(\"GAME STATE AFTER RESETING GAME\", gameState);\n  }\n\n\n  useEffect(() => {\n    if (gameState.gameOver) {\n      console.log(\"GAME OVER!!!!!!!!!!!!!!!!!\");\n\n    }\n  }, []);\n\n  return (\n    <Router>\n      <div>\n        <Navbar />\n        <Route exact path=\"/memory-game/\" render={(props) => (<Home {...props} search={search} startGame={startGame} />)} />\n        <Route exact path=\"/memory-game/Game\" render={(props) => (<Game {...props}\n          click={click} coins={gameState.coins} resetGame={resetState} playing={gameState.playing} result={gameState.result} gameOver={gameState.gameOver} />)} />\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n\n// Go to package json(top), add new key called homepage, value is link copied from GitHub \n// Npm install --save gh-pages\n// Back to package json, under scripts, add two keys\n// Add predeploy: npm run build\n// Add deploy: gh-pages -d build\n// Terminal then npm run deploy\n// Under setting GitHub, source to gh-pages branch","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}