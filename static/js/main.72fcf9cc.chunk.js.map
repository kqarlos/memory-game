{"version":3,"sources":["components/Navbar/index.js","pages/Home/index.js","components/Tile/index.js","pages/Game/index.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Home","search","onChange","value","role","Tile","click","image","onClick","src","alt","Game","result","gameOver","map","gif","images","original","url","theme","axios","get","App","useState","clicked","gameState","e","target","API","then","res","data","length","Error","status","message","console","log","index","sort","Math","random","useEffect","exact","path","render","props","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oVAiBeA,MAZf,WACI,OACI,yBAAKC,UAAU,4CACX,kBAAC,IAAD,CAAMA,UAAU,oBAAoBC,GAAG,iBAC/B,0BAAMD,UAAU,wBAAuB,uBAAGA,UAAU,iBAApD,gBAAoF,uBAChFA,UAAU,qBCoBnBE,EA3BF,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEZ,OACI,yBAAKH,UAAU,kBACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,aAAd,0CACA,uBAAGA,UAAU,aAAb,sBACA,4BAAQA,UAAU,+BAA+BI,SAAUD,GACvD,4BAAQE,MAAM,KACd,4BAAQA,MAAM,aAAd,cACA,4BAAQA,MAAM,oBAAd,sBACA,4BAAQA,MAAM,eAAd,wBACA,4BAAQA,MAAM,gBAAd,kBACA,4BAAQA,MAAM,gBAAd,iBAEJ,uBAAGL,UAAU,aAET,kBAAC,IAAD,CAAMC,GAAG,oBAAoBD,UAAU,yBAAyBM,KAAK,UAArE,eACgB,uBAAGN,UAAU,wB,MCVlCO,MARf,YAAiC,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,MACnB,OACI,yBAAKC,QAAS,kBAAMF,EAAMC,IAAQT,UAAU,SACxC,yBAAKA,UAAU,qBAAqBW,IAAKF,EAAOG,IAAKH,MCmBlDI,G,MAlBF,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,OAAQN,EAAsB,EAAtBA,MAAsB,EAAfO,SAE3B,OACI,yBAAKf,UAAU,kBACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,aAAd,OACA,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACVc,EAAOE,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,CAAMT,MAAOA,EAAOC,MAAOQ,EAAIC,OAAOC,SAASC,e,iBCd5D,EACE,SAAUC,GAEnB,OAAOC,IAAMC,IAAI,0CAA4CF,EAAQ,sDCgE9DG,MA5Df,WAAgB,IAAD,EACqBC,mBAAS,CACzCJ,MAAO,GACPP,OAAQ,GACRC,UAAU,EACVW,QAAS,KALE,mBACNC,EADM,KASb,SAASxB,EAAOyB,GAEdD,EAAUN,MAAQO,EAAEC,OAAOxB,MAE3ByB,EAAgBH,EAAUN,OACvBU,MAAK,SAAAC,GACJ,GAAwB,IAApBA,EAAIC,KAAKC,OACX,MAAM,IAAIC,MAAM,qBAElB,GAAwB,UAApBH,EAAIC,KAAKG,OACX,MAAM,IAAID,MAAMH,EAAIC,KAAKI,SAE3BV,EAAUb,OAASkB,EAAIC,KAAKA,KAC5BK,QAAQC,IAAI,+BACZD,QAAQC,IAAIZ,MAKlB,SAASnB,EAAMgC,GAETb,EAAUD,QAAQc,GACpBb,EAAUZ,UAAW,GAErBY,EAAUD,QAAQc,IAAS,EAC3Bb,EAAUb,OAASa,EAAUb,OAAO2B,MAAK,kBAAMC,KAAKC,SAAW,OAEjEL,QAAQC,IAAI,0BACZD,QAAQC,IAAIZ,GAWd,OAhDa,KAyCbiB,qBAAU,WACJjB,EAAUZ,UACZuB,QAAQC,IAAI,gCAGbZ,EAAUb,QAGX,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,gBAAgBC,OAAQ,SAACC,GAAD,OAAY,kBAAC,EAAD,iBAAUA,EAAV,CAAiB7C,OAAQA,QAC/E,kBAAC,IAAD,CAAO0C,OAAK,EAACC,KAAK,oBAAoBC,OAAQ,SAACC,GAAD,OAAY,kBAAC,EAAD,iBAAUA,EAAV,CAAiBxC,MAAOA,EAAOM,OAAQa,EAAUb,OAAQC,SAAUiC,EAAMjC,kBClDvHkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.72fcf9cc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./style.css\"\r\n\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar bg-success justify-content-center\">\r\n            <Link className=\"navbar-brand py-2\" to=\"/memory-game/\">\r\n                    <span className=\"display-1 text-white\"><i className=\"fas fa-brain\"></i> Memory Game <i\r\n                        className=\"fas fa-brain\"></i></span>\r\n            </Link>\r\n\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = ({ search }) => {\r\n\r\n    return (\r\n        <div className=\"container mt-4\">\r\n            <div className=\"jumbotron text-center\">\r\n                <h1 className=\"display-4\">Test your memory skills with this game</h1>\r\n                <p className=\"lead my-2\">Select your theme:</p>\r\n                <select className=\"form-control form-control-lg\" onChange={search}>\r\n                    <option value=\"\"></option>\r\n                    <option value=\"theoffice\">The Office</option>\r\n                    <option value=\"brooklynninenine\">Brooklyn Nine Nine</option>\r\n                    <option value=\"parksandrec\">Parks and Recreation</option>\r\n                    <option value=\"rickandmorty\">Rick And Morty</option>\r\n                    <option value=\"supernatural\">Supernatural</option>\r\n                </select>\r\n                <p className=\"lead py-3\">\r\n\r\n                    <Link to=\"/memory-game/Game\" className=\"btn btn-warning btn-lg\" role=\"button\">\r\n                        Get Playing <i className=\"fas fa-gamepad\"></i>\r\n                    </Link>\r\n\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Tile({ click, image }) {\r\n    return (\r\n        <div onClick={() => click(image)} className=\"col-4\">\r\n            <img className=\"mb-3 img-thumbnail\" src={image} alt={image} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tile;\r\n","import React, { useEffect, useState, Component } from \"react\";\r\n// import GameContext from \"../../utils/GameContext\";\r\n// import API from \"../../utils/API\";\r\nimport Tile from \"../../components/Tile\"\r\n// import Wrapper from \"../../components/Wrapper\";\r\nimport \"./style.css\";\r\n\r\nconst Game = ({ result, click, gameOver }) => {\r\n\r\n    return (\r\n        <div className=\"container mt-4\">\r\n            <div className=\"jumbotron text-center\">\r\n                <h1 className=\"display-4\">Go!</h1>\r\n                <div className=\"container mt-3\">\r\n                    <div className=\"row\">\r\n                        {result.map((gif) => (\r\n                            <Tile click={click} image={gif.images.original.url} />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Game;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n    searchTiles: function (theme) {\r\n        var APIKEY = \"bioSSe7tdt2zjVgAfZgThBaUxDZ6UA3K\";\r\n        return axios.get(\"https://api.giphy.com/v1/gifs/search?q=\" + theme + \"&api_key=\" + APIKEY + \"&limit=9\");\r\n    }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./pages/Home\";\nimport Game from \"./pages/Game\";\nimport API from \"./utils/API\";\n\n\nfunction App() {\n  const [gameState, setGameState] = useState({\n    theme: \"\",\n    result: [],\n    gameOver: false,\n    clicked: {}\n  });\n\n\n  function search(e) {\n\n    gameState.theme = e.target.value;\n\n    API.searchTiles(gameState.theme)\n      .then(res => {\n        if (res.data.length === 0) {\n          throw new Error(\"No results found.\");\n        }\n        if (res.data.status === \"error\") {\n          throw new Error(res.data.message);\n        }\n        gameState.result = res.data.data;\n        console.log(\"GAME STATE AFTER API SEARCH\")\n        console.log(gameState);\n      })\n    // .catch(err => gameModel.setError(err));\n  }\n\n  function click(index) {\n    // console.log(index);\n    if (gameState.clicked[index]) {\n      gameState.gameOver = true;\n    } else {\n      gameState.clicked[index] = true;\n      gameState.result = gameState.result.sort(() => Math.random() - 0.5);\n    }\n    console.log(\"GAME STATE AFTER CLICK\")\n    console.log(gameState);\n  }\n\n\n  useEffect(() => {\n    if (gameState.gameOver) {\n      console.log(\"GAME OVER!!!!!!!!!!!!!!!!!\");\n\n   }\n  }, gameState.result);\n\n  return (\n    <Router>\n      <div>\n        <Navbar />\n        <Route exact path=\"/memory-game/\" render={(props) => (<Home {...props} search={search} />)} />\n        <Route exact path=\"/memory-game/Game\" render={(props) => (<Game {...props} click={click} result={gameState.result} gameOver={props.gameOver} />)} />\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n\n// Go to package json(top), add new key called homepage, value is link copied from GitHub \n// Npm install --save gh-pages\n// Back to package json, under scripts, add two keys\n// Add predeploy: npm run build\n// Add deploy: gh-pages -d build\n// Terminal then npm run deploy\n// Under setting GitHub, source to gh-pages branch","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}